<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Dec 07 02:58:43 PST 2017
  Author:  oracle
  Type: BPEL 2.0 Process
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="Fulfillment"
         targetNamespace="http://xmlns.oracle.com/POApp/POProcessing/Fulfillment"
         xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:client="http://xmlns.oracle.com/POApp/POProcessing/Fulfillment"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns1="http://www.example.org/ns/fulfillment"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/jms/POApp/POProcessing/UPSJmsService"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/jms/POApp/POProcessing/USPSJmsService"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/jms/POApp/POProcessing/FedExJmsService"
         xmlns:ns5="http://www.example.org/ns/intorder"
         xmlns:ns6="http://xmlns.oracle.com/POApp/internalStore/manageInventory"
         xmlns:ns7="http://xmlns.oracle.com/POApp/onlineStore/manageStock"
         xmlns:ns8="http://www.example.org/ns/store"
         xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/db/POApp/POProcessing/insertOrder"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns10="http://xmlns.oracle.com/pcbpel/adapter/db/top/insertOrder"
         xmlns:ns11="http://oracle.com/sca/soapservice/POApp/customerService/customerService"
         xmlns:ns12="http://www.example.org"
         xmlns:ns13="http://xmlns.oracle.com/ias/pcbpel/NotificationService">
    <import namespace="http://www.example.org/ns/fulfillment"
            location="xsd/fulfillment.xsd"
            importType="http://www.w3.org/2001/XMLSchema"/>
    <import namespace="http://xmlns.oracle.com/POApp/POProcessing/Fulfillment" location="Fulfillment.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    --> 
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="fulfillment_client" partnerLinkType="client:Fulfillment" myRole="FulfillmentProvider" partnerRole="FulfillmentRequester"/>
        <partnerLink name="UPSJmsService"
                     partnerLinkType="ns2:Produce_Message_plt"
                     partnerRole="Produce_Message_role"/>
        <partnerLink name="USPSJmsService"
                     partnerLinkType="ns3:Produce_Message_plt"
                     partnerRole="Produce_Message_role"/>
        <partnerLink name="FedExJmsService"
                     partnerLinkType="ns4:Produce_Message_plt"
                     partnerRole="Produce_Message_role"/>
        <partnerLink name="internalStore" partnerLinkType="ns6:manageInventory"
                     partnerRole="manageInventoryProvider"
                     myRole="manageInventoryRequester"/>
        <partnerLink name="onlineStore" partnerLinkType="ns7:manageStock"
                     partnerRole="manageStockProvider"
                     myRole="manageStockRequester"/>
        <partnerLink name="insertOrder" partnerLinkType="ns9:insertOrder_plt"
                     partnerRole="insertOrder_role"/>
        <partnerLink name="customerService"
                     partnerLinkType="ns11:customerService"
                     partnerRole="get_ptt"/>
        <partnerLink name="NotificationService1"
                     partnerLinkType="ns13:NotificationServiceLink"
                     partnerRole="NotificationServiceProvider"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:FulfillmentRequestMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:FulfillmentResponseMessage"/>
        <variable name="Invoke1_merge_InputVariable"
                  messageType="ns9:OrdersCollection_msg"/>
        <variable name="invokeCustomer_get_InputVariable"
                  messageType="ns11:requestMessage"/>
        <variable name="invokeCustomer_get_OutputVariable"
                  messageType="ns11:replyMessage"/>
    </variables>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in Fulfillment.wsdl) -->
        <receive name="receiveInput" partnerLink="fulfillment_client" portType="client:Fulfillment" operation="process" variable="inputVariable" createInstance="yes"/>
        <scope name="insertOrder" exitOnStandardFault="no">
            <bpelx:annotation>
                <bpelx:general>
                    <bpelx:property name="userLabel">
                        <![CDATA[insertOrder]]>
                    </bpelx:property>
                    <bpelx:property name="userImage">
                        <![CDATA[financialsystem_lg.png]]>
                    </bpelx:property>
                </bpelx:general>
            </bpelx:annotation>
            <variables>
                <variable name="invokeInsertOrder_merge_InputVariable"
                          messageType="ns9:OrdersCollection_msg"/>
            </variables>
            <sequence name="Sequence10">
                <assign name="setOrderId">
                    <copy>
                        <from>oraext:sequence-next-val('ORDER_SEQ','jdbc/soademoDS')</from>
                        <to>$inputVariable.payload/ns5:orderId</to>
                    </copy>
                </assign>
                <assign name="prepOrder">
                    <bpelx:annotation>
                        <bpelx:pattern patternName="bpelx:transformation"/>
                    </bpelx:annotation>
                    <copy>
                        <from>ora:doXSLTransformForDoc("xsl/trfOrder.xsl", $inputVariable.payload)</from>
                        <to variable="invokeInsertOrder_merge_InputVariable"
                            part="OrdersCollection"/>
                    </copy>
                </assign>
                <invoke name="invokeInsertOrder"
                        partnerLink="insertOrder"
                        portType="ns9:insertOrder_ptt" operation="merge"
                        inputVariable="invokeInsertOrder_merge_InputVariable"
                        bpelx:invokeAsDetail="no"/>
                <assign name="AssignCustomer">
                    <copy>
                        <from>$inputVariable.payload/ns5:customerId</from>
                        <to>$invokeCustomer_get_InputVariable.request/ns12:custID</to>
                    </copy>
                </assign>
                <invoke name="invokeCustomer"
                        partnerLink="customerService" portType="ns11:get_ptt"
                        operation="get"
                        inputVariable="invokeCustomer_get_InputVariable"
                        outputVariable="invokeCustomer_get_OutputVariable"
                        bpelx:invokeAsDetail="no"/>
            </sequence>
        </scope>
        <scope name="checkStock" exitOnStandardFault="no">
            <bpelx:annotation>
                <bpelx:general>
                    <bpelx:property name="userLabel">
                        <![CDATA[checkStock]]>
                    </bpelx:property>
                </bpelx:general>
            </bpelx:annotation>
            <variables>
                <variable name="checkInternalStore_checkStock_InputVariable"
                          messageType="ns6:manageInventoryRequestMessage"/>
                <variable name="ReceiveInStock_checkStock_InputVariable"
                          messageType="ns6:manageInventoryRequestMessage"/>
                <variable name="checkOnlineStore_checkStock_InputVariable"
                          messageType="ns7:manageStockRequestMessage"/>
                <variable name="receiveInternalStore_checkStockResponse_InputVariable"
                          messageType="ns6:manageInventoryResponseMessage"/>
                <variable name="ReceiveOnlineStore_checkStockResponse_InputVariable"
                          messageType="ns7:manageStockResponseMessage"/>
                <variable name="acquirerInternalStore_acquireStock_InputVariable"
                          messageType="ns6:manageInventoryRequestMessage"/>
                <variable name="ReceiveInternalStore_acquireStockResponse_InputVariable"
                          messageType="ns6:manageInventoryResponseMessage"/>
                <variable name="acquirerOnlineStore_acquireStock_InputVariable"
                          messageType="ns7:manageStockRequestMessage"/>
                <variable name="ReceiveOnlineStore_acquireStockResponse_InputVariable"
                          messageType="ns7:manageStockResponseMessage"/>
            </variables>
            <sequence>
                <flow name="checkStock">
                    <sequence name="Sequence7">
                        <assign name="prepInternalCheck">
                            <bpelx:annotation>
                                <bpelx:pattern patternName="bpelx:transformation"/>
                            </bpelx:annotation>
                            <copy>
                                <from>ora:doXSLTransformForDoc("xsl/TrfInternalStore.xsl", $inputVariable.payload)</from>
                                <to variable="checkInternalStore_checkStock_InputVariable"
                                    part="payload"/>
                            </copy>
                        </assign>
                        <invoke name="checkInternalStore"
                                bpelx:invokeAsDetail="no"
                                partnerLink="internalStore"
                                portType="ns6:manageInventory"
                                operation="checkStock"
                                inputVariable="checkInternalStore_checkStock_InputVariable"/>
                        <receive name="receiveInternalStore" createInstance="no"
                                 partnerLink="internalStore"
                                 portType="ns6:manageInventoryCallback"
                                 operation="checkStockResponse"
                                 variable="receiveInternalStore_checkStockResponse_InputVariable"/>
                    </sequence>
                    <sequence name="Sequence6">
                        <assign name="prepOnlineCheck">
                            <bpelx:annotation>
                                <bpelx:pattern patternName="bpelx:transformation"/>
                            </bpelx:annotation>
                            <copy>
                                <from>ora:doXSLTransformForDoc("xsl/TrfOnlineStore2.xsl", $inputVariable.payload)</from>
                                <to variable="checkOnlineStore_checkStock_InputVariable"
                                    part="payload"/>
                            </copy>
                        </assign>
                        <invoke name="checkOnlineStore"
                                partnerLink="onlineStore"
                                portType="ns7:manageStock"
                                operation="checkStock"
                                inputVariable="checkOnlineStore_checkStock_InputVariable"
                                bpelx:invokeAsDetail="no"/>
                        <receive name="ReceiveOnlineStore" createInstance="no"
                                 partnerLink="onlineStore"
                                 portType="ns7:manageStockCallback"
                                 operation="checkStockResponse"
                                 variable="ReceiveOnlineStore_checkStockResponse_InputVariable"/>
                    </sequence>
                </flow>
                <if name="If1">
                    <documentation>
                        <![CDATA[internalStore]]>
                    </documentation>
                    <condition>$receiveInternalStore_checkStockResponse_InputVariable.payload/ns8:status = 'In Stock'</condition>
                    <sequence name="Sequence8">
                        <assign name="prepAcquirerInternalStore">
                            <copy>
                                <from>$checkInternalStore_checkStock_InputVariable.payload</from>
                                <to>$acquirerInternalStore_acquireStock_InputVariable.payload</to>
                            </copy>
                        </assign>
                        <invoke name="acquirerInternalStore" bpelx:invokeAsDetail="no"
                                partnerLink="internalStore"
                                portType="ns6:manageInventory"
                                operation="acquireStock"
                                inputVariable="acquirerInternalStore_acquireStock_InputVariable"/>
                        <receive name="ReceiveInternalStore"
                                 createInstance="no"
                                 partnerLink="internalStore"
                                 portType="ns6:manageInventoryCallback"
                                 operation="acquireStockResponse"
                                 variable="ReceiveInternalStore_acquireStockResponse_InputVariable"/>
                    </sequence>
                    <elseif>
                        <documentation>
                            <![CDATA[OnlineStore]]>
                        </documentation>
                        <condition>$ReceiveOnlineStore_checkStockResponse_InputVariable.payload/ns8:status= 'In Stock'</condition>
                        <sequence name="Sequence9">
                            <assign name="prepAcquirerOnlineStore">
                                <copy>
                                    <from>$checkOnlineStore_checkStock_InputVariable.payload</from>
                                    <to>$acquirerOnlineStore_acquireStock_InputVariable.payload</to>
                                </copy>
                            </assign>
                            <invoke name="acquirerOnlineStore" bpelx:invokeAsDetail="no"
                                    partnerLink="onlineStore"
                                    portType="ns7:manageStock"
                                    operation="acquireStock"
                                    inputVariable="acquirerOnlineStore_acquireStock_InputVariable"/>
                            <receive name="ReceiveOnlineStore"
                                     createInstance="no"
                                     partnerLink="onlineStore"
                                     portType="ns7:manageStockCallback"
                                     operation="acquireStockResponse"
                                     variable="ReceiveOnlineStore_acquireStockResponse_InputVariable"/>
                        </sequence>
                    </elseif>
                    <else>
                        <documentation>
                            <![CDATA[WaitingList]]>
                        </documentation>
                        <assign name="WaitingList">
                            <copy>
                                <from>'Waiting List'</from>
                                <to>$outputVariable.payload/ns1:shipStatus</to>
                            </copy>
                        </assign>
                    </else>
                </if>
            </sequence>
        </scope>
        <if name="If2">
            <documentation>
                <![CDATA[completed]]>
            </documentation>
            <condition>$outputVariable.payload/ns1:shipStatus != 'Waiting List'</condition>
            <sequence>
                <scope name="ShipOrder" exitOnStandardFault="no">
                    <bpelx:annotation>
                        <bpelx:general>
                            <bpelx:property name="userImage">
                                <![CDATA[transportation_lg.png]]>
                            </bpelx:property>
                        </bpelx:general>
                    </bpelx:annotation>
                    <variables>
                        <variable name="UPS_Produce_Message_InputVariable"
                                  messageType="ns2:Produce_Message_msg"/>
                        <variable name="USPS_Produce_Message_InputVariable"
                                  messageType="ns3:Produce_Message_msg"/>
                        <variable name="FEDEX_Produce_Message_InputVariable"
                                  messageType="ns4:Produce_Message_msg"/>
                        <variable name="ShipInfo"
                                  element="ns1:ShippingRequest"/>
                    </variables>
                    <sequence>
                        <assign name="Transform1">
                            <bpelx:annotation>
                                <bpelx:pattern patternName="bpelx:transformation"/>
                            </bpelx:annotation>
                            <copy>
                                <from>ora:doXSLTransformForDoc("xsl/trfShipInfo.xsl", $invokeCustomer_get_OutputVariable.response, "inputVariable.payload", $inputVariable.payload)</from>
                                <to variable="ShipInfo"/>
                            </copy>
                        </assign>
                        <if name="IfShipMethod">
                            <documentation>
                                <![CDATA[UPS]]>
                            </documentation>
                            <condition>$inputVariable.payload/ns5:shipMethod = 'two_day'</condition>
                            <sequence name="Sequence2">
                                <assign name="prepUPS">
                                    <copy>
                                        <from>$inputVariable.payload/ns5:orderId</from>
                                        <to>$UPS_Produce_Message_InputVariable.body/ns1:orderId</to>
                                    </copy>
                                    <copy>
                                        <from>$ShipInfo/ns1:shippingAddress</from>
                                        <to>$USPS_Produce_Message_InputVariable.body/ns1:shippingAddress</to>
                                    </copy>
                                    <copy>
                                        <from>$ShipInfo/ns1:orderId</from>
                                        <to>$USPS_Produce_Message_InputVariable.body/ns1:orderId</to>
                                    </copy>
                                    <copy>
                                        <from>$ShipInfo/ns1:custName</from>
                                        <to>$USPS_Produce_Message_InputVariable.body/ns1:custName</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.payload/ns5:customerId</from>
                                        <to>$UPS_Produce_Message_InputVariable.body/ns1:custName</to>
                                    </copy>
                                    <extensionAssignOperation>
                                        <bpelx:insertAfter>
                                            <bpelx:from>' (UPS) '</bpelx:from>
                                            <bpelx:to>$UPS_Produce_Message_InputVariable.body/ns1:custName</bpelx:to>
                                        </bpelx:insertAfter>
                                    </extensionAssignOperation>
                                    <copy>
                                        <from>'completed'</from>
                                        <to>$outputVariable.payload/ns1:shipStatus</to>
                                    </copy>
                                    <copy>
                                        <from>'UPS'</from>
                                        <to>$outputVariable.payload/ns1:carrier</to>
                                    </copy>
                                </assign>
                                <invoke name="UPS" partnerLink="UPSJmsService"
                                        portType="ns2:Produce_Message_ptt"
                                        operation="Produce_Message"
                                        inputVariable="UPS_Produce_Message_InputVariable"
                                        bpelx:invokeAsDetail="no"/>
                            </sequence>
                            <elseif>
                                <documentation>
                                    <![CDATA[USPS]]>
                                </documentation>
                                <condition>$inputVariable.payload/ns5:shipMethod = 'five_day'</condition>
                                <sequence name="Sequence3">
                                    <assign name="prepUSPS">
                                        <copy>
                                            <from>$ShipInfo/ns1:shippingAddress</from>
                                            <to>$USPS_Produce_Message_InputVariable.body/ns1:shippingAddress</to>
                                        </copy>
                                        <copy>
                                            <from>' (USPS)'</from>
                                            <to>$USPS_Produce_Message_InputVariable.body/ns1:custName</to>
                                        </copy>
                                        <copy>
                                            <from>$ShipInfo/ns1:custName</from>
                                            <to>$USPS_Produce_Message_InputVariable.body/ns1:custName</to>
                                        </copy>
                                        <copy>
                                            <from>$ShipInfo/ns1:orderId</from>
                                            <to>$USPS_Produce_Message_InputVariable.body/ns1:orderId</to>
                                        </copy>
                                        <copy>
                                            <from>'completed'</from>
                                            <to>$outputVariable.payload/ns1:shipStatus</to>
                                        </copy>
                                        <copy>
                                            <from>'USPS'</from>
                                            <to>$outputVariable.payload/ns1:carrier</to>
                                        </copy>
                                    </assign>
                                    <invoke name="USPS"
                                            partnerLink="USPSJmsService"
                                            portType="ns3:Produce_Message_ptt"
                                            operation="Produce_Message"
                                            inputVariable="USPS_Produce_Message_InputVariable"
                                            bpelx:invokeAsDetail="no"/>
                                </sequence>
                            </elseif>
                            <else>
                                <documentation>
                                    <![CDATA[FEDEX]]>
                                </documentation>
                                <sequence name="Sequence4">
                                    <assign name="prepFedex">
                                        <copy>
                                            <from>' (FEDEX)'</from>
                                            <to>$FEDEX_Produce_Message_InputVariable.body/ns1:custName</to>
                                        </copy>
                                        <copy>
                                            <from>$ShipInfo/ns1:orderId</from>
                                            <to>$FEDEX_Produce_Message_InputVariable.body/ns1:orderId</to>
                                        </copy>
                                        <copy>
                                            <from>$ShipInfo/ns1:shippingAddress</from>
                                            <to>$FEDEX_Produce_Message_InputVariable.body/ns1:shippingAddress</to>
                                        </copy>
                                        <copy>
                                            <from>$ShipInfo/ns1:custName</from>
                                            <to>$FEDEX_Produce_Message_InputVariable.body/ns1:custName</to>
                                        </copy>
                                        <copy>
                                            <from>'completed'</from>
                                            <to>$outputVariable.payload/ns1:shipStatus</to>
                                        </copy>
                                        <copy>
                                            <from>'FEDEX'</from>
                                            <to>$outputVariable.payload/ns1:carrier</to>
                                        </copy>
                                    </assign>
                                    <invoke name="FEDEX"
                                            bpelx:invokeAsDetail="no"
                                            partnerLink="FedExJmsService"
                                            portType="ns4:Produce_Message_ptt"
                                            operation="Produce_Message"
                                            inputVariable="FEDEX_Produce_Message_InputVariable"/>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </scope>
            </sequence>
            <else>
                <documentation>
                    <![CDATA[WaitinList]]>
                </documentation>
                <empty name="Empty2"/>
            </else>
        </if>
        <assign name="prepAssign">
            <copy>
                <from>$inputVariable.payload/ns5:orderId</from>
                <to>$Invoke1_merge_InputVariable.OrdersCollection/ns10:Orders/ns10:ordId</to>
            </copy>
            <copy>
                <from>$outputVariable.payload/ns1:shipStatus</from>
                <to>$Invoke1_merge_InputVariable.OrdersCollection/ns10:Orders/ns10:status</to>
            </copy>
            <copy>
                <from>xp20:current-dateTime()</from>
                <to>$Invoke1_merge_InputVariable.OrdersCollection/ns10:Orders/ns10:dateShipped</to>
            </copy>
        </assign>
        <invoke name="InvokeUpdateOrder" bpelx:invokeAsDetail="no"
                partnerLink="insertOrder" portType="ns9:insertOrder_ptt"
                operation="merge" inputVariable="Invoke1_merge_InputVariable"/>
        <scope name="Email1">
            <bpelx:annotation>
                <bpelx:pattern patternName="bpelx:email"/>
            </bpelx:annotation>
            <variables>
                <variable name="varNotificationReq"
                          messageType="ns13:EmailNotificationRequest"/>
                <variable name="varNotificationResponse"
                          messageType="ns13:ArrayOfResponse"/>
                <variable name="NotificationServiceFaultVariable"
                          messageType="ns13:NotificationServiceErrorMessage"/>
            </variables>
            <sequence name="Sequence11">
                <assign name="EmailParamsAssign">
                    <copy>
                        <from>string('Default')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:FromAccountName</to>
                    </copy>
                    <copy>
                        <from>string('')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:FromUserName</to>
                    </copy>
                    <copy>
                        <from>string('')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:Bcc</to>
                    </copy>
                    <copy>
                        <from>string('')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:Cc</to>
                    </copy>
                    <copy>
                        <from>string('noreplay@sapo.pt')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:ReplyToAddress</to>
                    </copy>
                    <copy>
                        <from>concat('A sua encomenda encontra-se em ', $outputVariable.payload/ns1:shipStatus , 'a ser entregue por ', $outputVariable.payload/ns1:carrier)</from>
                        <to>$varNotificationReq.EmailPayload/ns13:Subject</to>
                    </copy>
                    <copy>
                        <from>$invokeCustomer_get_OutputVariable.response/ns12:customer/ns12:email</from>
                        <to>$varNotificationReq.EmailPayload/ns13:To</to>
                    </copy>
                    <copy>
                        <from>concat(' &lt;p&gt; Dear' , $invokeCustomer_get_OutputVariable.response/ns12:customer/ns12:firstName , $invokeCustomer_get_OutputVariable.response/ns12:customer/ns12:lastName,  '&lt;/p&gt;&lt;p&gt; The status of your order is: &lt;b&gt; ', $invokeCustomer_get_OutputVariable.response/ns12:customer/ns12:status ,'&lt;/b&gt;')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:Content/ns13:ContentBody</to>
                    </copy>
                    <copy>
                        <from>string('text/html; charset=UTF-8')</from>
                        <to>$varNotificationReq.EmailPayload/ns13:Content/ns13:MimeType</to>
                    </copy>
                </assign>
                <invoke name="InvokeNotificationService"
                        portType="ns13:NotificationService"
                        partnerLink="NotificationService1"
                        inputVariable="varNotificationReq"
                        outputVariable="varNotificationResponse"
                        operation="sendEmailNotification"
                        bpelx:invokeAsDetail="no"/>
            </sequence>
        </scope>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <invoke name="callbackClient" partnerLink="fulfillment_client" portType="client:FulfillmentCallback" operation="processResponse" inputVariable="outputVariable"/>
    </sequence>
</process>